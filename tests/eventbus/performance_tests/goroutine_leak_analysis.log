=== RUN   TestKafkaGoroutineLeakAnalysis
    goroutine_leak_analysis_test.go:61: ========================================================================
    goroutine_leak_analysis_test.go:62: 🔍 Kafka 协程泄漏详细分析
    goroutine_leak_analysis_test.go:63: ========================================================================
    goroutine_leak_analysis_test.go:69: 📊 初始协程数: 2
    goroutine_leak_analysis_test.go:72: 
        🔧 创建 Kafka EventBus...
2025-10-13T20:25:08.406+0800	INFO	logger/logger.go:48	Kafka EventBus created successfully (AsyncProducer mode)brokers[localhost:29094]clientIdtest-leak-analysishealthCheckInterval0scompressionsnappyflushFrequency10msflushMessages100flushBytes1048576
    goroutine_leak_analysis_test.go:77: 📊 创建后协程数: 313 (增加 311)
    goroutine_leak_analysis_test.go:80: 
        📥 订阅消息...
    goroutine_leak_analysis_test.go:91: 📊 订阅后协程数: 326 (增加 13)
    goroutine_leak_analysis_test.go:97: 
        📸 获取关闭前的协程堆栈...
    goroutine_leak_analysis_test.go:100: 📊 关闭前协程数: 326
    goroutine_leak_analysis_test.go:103: 
        🔒 关闭 Kafka EventBus...
    goroutine_leak_analysis_test.go:115: 
        📸 获取关闭后的协程堆栈...
    goroutine_leak_analysis_test.go:118: 📊 关闭后协程数: 3
    goroutine_leak_analysis_test.go:122: 
        🔴 协程泄漏数: 1
    goroutine_leak_analysis_test.go:125: 
        ========================================================================
    goroutine_leak_analysis_test.go:126: 🔍 泄漏协程详细分析
    goroutine_leak_analysis_test.go:127: ========================================================================
    goroutine_leak_analysis_test.go:156: 关闭前协程堆栈行数: 2022
    goroutine_leak_analysis_test.go:157: 关闭后协程堆栈行数: 30
    goroutine_leak_analysis_test.go:163: 
        关闭前协程数: 326
    goroutine_leak_analysis_test.go:164: 关闭后协程数: 3
    goroutine_leak_analysis_test.go:167: 
        🔴 泄漏的协程:
    goroutine_leak_analysis_test.go:176: 
        协程 #1:
    goroutine_leak_analysis_test.go:177: goroutine 58 [chan receive]:
        github.com/rcrowley/go-metrics.(*meterArbiter).tick(...)
        	C:/Users/jiyua/go/pkg/mod/github.com/rcrowley/go-metrics@v0.0.0-20250401214520-65e299d6c5c9/meter.go:239
        created by github.com/rcrowley/go-metrics.NewMeter in goroutine 67
        	C:/Users/jiyua/go/pkg/mod/github.com/rcrowley/go-metrics@v0.0.0-20250401214520-65e299d6c5c9/meter.go:46 +0xbf
        
    goroutine_leak_analysis_test.go:181: 
        总泄漏协程数（排除测试框架）: 1
    goroutine_leak_analysis_test.go:132: 
        ========================================================================
    goroutine_leak_analysis_test.go:133: 📋 关闭后的所有协程堆栈
    goroutine_leak_analysis_test.go:134: ========================================================================
    goroutine_leak_analysis_test.go:135: 
        goroutine 19 [running]:
        github.com/ChenBigdata421/jxt-core/tests/eventbus/performance_tests.getGoroutineProfile(...)
        	D:/JXT/jxt-evidence-system/jxt-core/tests/eventbus/performance_tests/goroutine_leak_analysis_test.go:147
        github.com/ChenBigdata421/jxt-core/tests/eventbus/performance_tests.TestKafkaGoroutineLeakAnalysis(0xc000106540)
        	D:/JXT/jxt-evidence-system/jxt-core/tests/eventbus/performance_tests/goroutine_leak_analysis_test.go:116 +0x848
        testing.tRunner(0xc000106540, 0xb68618)
        	C:/Program Files/Go/src/testing/testing.go:1792 +0xcb
        created by testing.(*T).Run in goroutine 1
        	C:/Program Files/Go/src/testing/testing.go:1851 +0x3f6
        
        goroutine 1 [chan receive]:
        testing.(*T).Run(0xc000106380, {0xb3598f?, 0x7ffcdf8f3fb0?}, 0xb68618)
        	C:/Program Files/Go/src/testing/testing.go:1859 +0x414
        testing.runTests.func1(0xc000106380)
        	C:/Program Files/Go/src/testing/testing.go:2279 +0x37
        testing.tRunner(0xc000106380, 0xc000131c70)
        	C:/Program Files/Go/src/testing/testing.go:1792 +0xcb
        testing.runTests(0xc00049a0a8, {0x12d8a80, 0x10, 0x10}, {0x12e5820?, 0x7?, 0x12e3de0?})
        	C:/Program Files/Go/src/testing/testing.go:2277 +0x4b4
        testing.(*M).Run(0xc00049e140)
        	C:/Program Files/Go/src/testing/testing.go:2142 +0x64a
        main.main()
        	_testmain.go:75 +0x9b
        
        goroutine 58 [chan receive]:
        github.com/rcrowley/go-metrics.(*meterArbiter).tick(...)
        	C:/Users/jiyua/go/pkg/mod/github.com/rcrowley/go-metrics@v0.0.0-20250401214520-65e299d6c5c9/meter.go:239
        created by github.com/rcrowley/go-metrics.NewMeter in goroutine 67
        	C:/Users/jiyua/go/pkg/mod/github.com/rcrowley/go-metrics@v0.0.0-20250401214520-65e299d6c5c9/meter.go:46 +0xbf
    goroutine_leak_analysis_test.go:138: 
        ========================================================================
    goroutine_leak_analysis_test.go:139: 📊 协程类型统计
    goroutine_leak_analysis_test.go:140: ========================================================================
    goroutine_leak_analysis_test.go:218: 
        协程类型分布:
    goroutine_leak_analysis_test.go:220:   EventBus Other                                    : 1
    goroutine_leak_analysis_test.go:220:   Testing Framework                                 : 1
    goroutine_leak_analysis_test.go:220:   Unknown                                           : 1
--- PASS: TestKafkaGoroutineLeakAnalysis (7.29s)
PASS
ok  	github.com/ChenBigdata421/jxt-core/tests/eventbus/performance_tests	8.101s
